meta {
  name: runtime vars
  type: http
  seq: 3
}

post {
  url: {{host}}/api/echo/text?query-foo={{runtime-var-query-foo}}
  body: text
  auth: none
}

query {
  query-foo: {{runtime-var-query-foo}}
}

headers {
  header-foo: {{runtime-var-header-foo}}
}

body:text {
  Hi, I am {{rUser.full_name}},
  I am {{rUser.age}} years old.
  My favorite food is {{rUser.fav-food[0]}} and {{rUser.fav-food[1]}}.
  I like attention: {{rUser.want.attention}}
}

assert {
  res.status: eq 200
}

script:pre-request {
  bru.setVar("rUser", {
    full_name: 'Bruno',
    age: 4,
    'fav-food': ['egg', 'meat'],
    'want.attention': true
  });
  
  bru.setVar("runtime-var-header-foo", "header-foobar");
  
  bru.setVar("runtime-var-query-foo", "query-foobar");
}

script:post-response {
  bru.setVar("rUser", null);
  bru.setVar("runtime-var-header-foo", null);
  bru.setVar("runtime-var-query-foo", null);
}

script:post-response {
  // Reset vars
  bru.setVar("rUser", {});
  
}

tests {
  test("should return json", function() {
    const expectedResponse = `Hi, I am Bruno,
  I am 4 years old.
  My favorite food is egg and meat.
  I like attention: true`;
    expect(res.getBody()).to.equal(expectedResponse);
  });
  
  test("should return header", function() {
    const expectedValue = `header-foobar`;
    expect(req.getHeader('header-foo')).to.equal(expectedValue);
  });
  
  test("should return query", function() {
    const expectedValue = `query-foobar`;
    expect(req.getUrl()).to.include(expectedValue);
  });
}
